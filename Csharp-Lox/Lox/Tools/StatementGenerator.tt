<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#
	string BASE_TYPE = "Statement";
    string EXPRESSION = "Expr";
    string TOKEN_TYPE = "Token";
    string TOKEN_LIST = "IList<Token>";
    string STMT_LIST = "IList<Statement>";
    string INDENT = "    ";

    var expressions = new [] 
    {
        new Exp("Block", [new Arg(STMT_LIST, "Statements")]),
        new Exp("Class", [new Arg(TOKEN_TYPE, "Name"), new Arg("Expr.Variable?", "Superclass"), new Arg("IEnumerable<Statement.Function>", "Methods")]),
        new Exp("Expression", [new Arg(EXPRESSION, "Body")]),
        new Exp("Function", [new Arg(TOKEN_TYPE, "Name"), new Arg(TOKEN_LIST, "Parameters"), new Arg(STMT_LIST, "Body")]),
        new Exp("If", [new Arg(EXPRESSION, "Condition"), new Arg(BASE_TYPE, "ThenBranch"), new Arg(BASE_TYPE, "ElseBranch")]),
        new Exp("Print", [new Arg(EXPRESSION, "Body")]),
        new Exp("Return", [new Arg(TOKEN_TYPE, "Keyword"), new Arg(EXPRESSION, "Value")]),
        new Exp("Var", [new Arg(TOKEN_TYPE, "Name"), new Arg(EXPRESSION, "Initializer")]),
        new Exp("While", [new Arg(EXPRESSION, "Condition"), new Arg(BASE_TYPE, "Body")])
    };
#>

namespace Lox;

public abstract class <#= BASE_TYPE #>
{
    public interface IVisitor<T> 
    {
<#		
	PushIndent(INDENT);
	for(int i = 0; i < expressions.Length; i++) 
	{
		var current = expressions[i];
		PushIndent(INDENT);
		Write("T Visit(");
		Write(current.Name);
        Write(" _" + current.Name.ToLower());
		WriteLine(");");
		PopIndent();
	}
	PopIndent();
#>
    }

	
    /// <summary>
    /// Base function for visiting our trees.
    /// </summary> 
    public abstract T Accept<T>(IVisitor<T> visitor);

<#		
	PushIndent(INDENT);
	for(int i = 0; i < expressions.Length; i++) 
	{
		var current = expressions[i];
		Write("public sealed class ");
		Write(current.Name);
		Write("(");
		
		for(int x = 0; x < current.Args.Length; x++)
		{
			var arg = current.Args[x];
			Write(arg.Type);
			Write(" ");
			Write(arg.Name.ToLower());
			if(x + 1 < current.Args.Length)
			{
				Write(", ");
			}
		}
		Write(")");

		Write(" : ");
		WriteLine(BASE_TYPE);
		WriteLine("{");
		PushIndent(INDENT);
		{
			
			for(int x = 0; x < current.Args.Length; x++)
			{
				var arg = current.Args[x];
				Write("public ");
				Write(arg.Type);
				Write(" ");
				Write(arg.Name);
				Write("{ get; } = ");
				Write(arg.Name.ToLower());
				WriteLine(";");
			}

			// Visit Function
			WriteLine(" ");
			WriteLine("public override T Accept<T>(IVisitor<T> visitor)");
			WriteLine("{");
			PushIndent(INDENT);
			Write("return visitor.Visit");
			WriteLine("(this);");
			PopIndent();
			WriteLine("}");
		}
		PopIndent();
		WriteLine("}");
	}
	PopIndent();
#>
}

<#+
    public struct Arg(string type, string name)
    {
        public string Type { get; } = type;
        public string Name { get; } = name;
    }

    public struct Exp(string name, Arg[] args)
    {
        public string Name { get; } = name;
        public Arg[] Args { get; } = args;
    }
#>