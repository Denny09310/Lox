<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
	string BASE_TYPE = "Expression";
	string TOKEN_TYPE = "Token";
	string INDENT = "    ";

	var expressions = new [] 
	{
		new Exp("Assign",   [new Arg(TOKEN_TYPE, "Name"),         new Arg(BASE_TYPE, "Value")]),
		new Exp("Binary",   [new Arg(BASE_TYPE, "Left"),           new Arg(TOKEN_TYPE, "Opp"),      new Arg(BASE_TYPE, "Right")]),
		new Exp("Call",     [new Arg(BASE_TYPE, "Callee"),        new Arg(TOKEN_TYPE, "Paren"),     new Arg("List<" + BASE_TYPE + ">", "Arguments")]),
		new Exp("Get",      [new Arg(BASE_TYPE, "Target"),        new Arg(TOKEN_TYPE, "Name")]),
		new Exp("Grouping", [new Arg(BASE_TYPE, "Expression")]),   
		new Exp("Literal",  [new Arg("object?", "Value")]),	     
		new Exp("Logical",  [new Arg(BASE_TYPE, "Left"),          new Arg(TOKEN_TYPE, "Opp"), new Arg(BASE_TYPE, "Right")]),
		new Exp("Set",      [new Arg(BASE_TYPE, "Target"),        new Arg(TOKEN_TYPE, "Name"),     new Arg(BASE_TYPE, "Value")]),
		new Exp("Super",    [new Arg(TOKEN_TYPE, "Keyword"),      new Arg(TOKEN_TYPE, "Method")]),
		new Exp("This",     [new Arg(TOKEN_TYPE, "Keyword")]),
		// Prefix + Postfix == Unary
		new Exp("Prefix",      [new Arg(TOKEN_TYPE, "Opp"),       new Arg(BASE_TYPE, "Right")]),
		new Exp("Postfix",     [new Arg(TOKEN_TYPE, "Opp"),       new Arg(BASE_TYPE, "Left")]),
		new Exp("Conditional", [new Arg(BASE_TYPE, "Expression"), new Arg(BASE_TYPE, "ThenBranch"), new Arg(BASE_TYPE, "ElseBranch")]),
		new Exp("Variable", [new Arg(TOKEN_TYPE, "Name")])
	};

#>

namespace Lox;

public abstract class <#= BASE_TYPE #>
{
    public interface IVisitor<out T> 
    {
<#		
	PushIndent(INDENT);
	for(int i = 0; i < expressions.Length; i++) 
	{
		var current = expressions[i];
		PushIndent(INDENT);
		Write("T Visit(");
		Write(current.Name);
        Write(" expression");
		WriteLine(");");
		PopIndent();
	}
	PopIndent();
#>
    }

	
    /// <summary>
    /// Base function for visiting our trees.
    /// </summary> 
    public abstract T Accept<T>(IVisitor<T> visitor);

<#		
	PushIndent(INDENT);
	for(int i = 0; i < expressions.Length; i++) 
	{
		var current = expressions[i];
		Write("public sealed class ");
		Write(current.Name);
		Write("(");
		
		for(int x = 0; x < current.Args.Length; x++)
		{
			var arg = current.Args[x];
			Write(arg.Kind);
			Write(" ");
			Write(arg.Name.ToLower());
			if(x + 1 < current.Args.Length)
			{
				Write(", ");
			}
		}
		Write(")");

		Write(" : ");
		WriteLine(BASE_TYPE);
		WriteLine("{");
		PushIndent(INDENT);
		{
			
			for(int x = 0; x < current.Args.Length; x++)
			{
				var arg = current.Args[x];
				Write("public ");
				Write(arg.Kind);
				Write(" ");
				Write(arg.Name);
				Write("{ get; } = ");
				Write(arg.Name.ToLower());
				WriteLine(";");
			}

			// Visit Function
			WriteLine(" ");
			WriteLine("public override T Accept<T>(IVisitor<T> visitor)");
			WriteLine("{");
			PushIndent(INDENT);
			Write("return visitor.Visit");
			WriteLine("(this);");
			PopIndent();
			WriteLine("}");
		}
		PopIndent();
		WriteLine("}");
	}
	PopIndent();
#>
}

<#+
    public struct Arg(string type, string name)
    {
        public string Type { get; } = type;
        public string Name { get; } = name;
    }

    public struct Exp(string name, Arg[] args)
    {
        public string Name { get; } = name;
        public Arg[] Args { get; } = args;
    }
#>